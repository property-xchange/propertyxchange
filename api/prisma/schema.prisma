// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum AccountType {
  INDIVIDUAL
  LAW
  SURVEY
  ORGANIZATION
  DEVELOPER
  INVESTOR
  OTHER
}

enum ListingStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
  EXPIRED
}

enum ListingCategory {
  RENT
  SALE
  JOINT_VENTURE
  SHORT_LET
}

enum PropertyType {
  CO_WORKING_SPACE
  COMMERCIAL_PROPERTY
  FLAT_APARTMENT
  HOUSE
  LAND
}

enum PropertySubType {
  // Co-working Space
  CONFERENCE_ROOM
  DESK
  MEETING_ROOM
  PRIVATE_OFFICE
  WORKSTATION

  // Commercial Property
  CHURCH
  EVENT_CENTER
  FACTORY
  FILLING_STATION
  HOTEL_GUEST_HOUSE
  OFFICE_SPACE
  SCHOOL
  SHOP
  SHOP_IN_MALL
  SHOW_ROOM
  TANK_FARM
  WAREHOUSE

  // Flat/Apartment
  BOYS_QUARTER
  MINI_FLAT
  PENTHOUSE
  SELF_CONTAIN
  SHARED_APARTMENT
  STUDIO_APARTMENT

  // House
  BLOCK_OF_FLATS
  DETACHED_BUNGALOW
  DETACHED_DUPLEX
  MASSIONETTE
  SEMI_DETACHED_BUNGALOW
  SEMI_DETACHED_DUPLEX
  TERRACED_BUNGALOW
  TERRACED_DUPLEX

  // Land
  COMMERCIAL_LAND
  INDUSTRIAL_LAND
  JOINT_VENTURE_LAND
  MIXED_USE_LAND
  RESIDENTIAL_LAND
  SERVICED_RESIDENTIAL_LAND
}

enum NotificationType {
  NEW_LISTING
  LISTING_APPROVED
  LISTING_REJECTED
  NEW_BLOG
  BLOG_COMMENT
  USER_REGISTERED
  REVIEW_SUBMITTED
  GENERAL
}

enum Role {
  USER
  STAFF
  ADMIN
}

enum UserStatus {
  ACTIVE
  BANNED
  SUSPENDED
}

model ListingReview {
  id         String  @id @default(cuid()) @map("_id")
  rating     Int // 1-5 stars
  comment    String
  isApproved Boolean @default(false)

  // Relations
  listingId String  @db.ObjectId
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  authorId  String  @db.ObjectId
  author    User    @relation(fields: [authorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([listingId, authorId]) // One review per user per listing
}

model Listing {
  id                  String          @id @default(auto()) @map("_id") @db.ObjectId
  slug                String          @unique
  status              ListingStatus   @default(PENDING)
  metaTitle           String?
  metaDescription     String?
  metaKeywords        String[]
  approvedBy          String?         @db.ObjectId
  approvedAt          DateTime?
  rejectedAt          DateTime?
  rejectionReason     String?
  name                String
  price               Float
  verification        Boolean         @default(false)
  number_of_beds      Int?
  number_of_bathrooms Int?
  toilets             Int?
  latitude            String?
  longitude           String?
  discountPercent     Float?
  discountPrice       Float?
  discountEndDate     DateTime?
  installment         Boolean?
  appendTo            String?
  installmentAppendTo String?
  initialPayment      Float?
  monthlyPayment      Float?
  duration            Int?
  furnished           Boolean?
  serviced            Boolean?
  newlyBuilt          Boolean?
  parking             Boolean?
  offer               Boolean?
  youtubeLink         String?
  instagramLink       String?
  features            String[]
  street              String
  lga                 String
  state               String
  description         String
  thumbnail           String?
  images              String[]
  createdAt           DateTime        @default(now())
  updatedAt           DateTime?
  purpose             ListingCategory
  type                PropertyType
  subType             PropertySubType

  // Relations
  approver         User?             @relation("ApprovedListings", fields: [approvedBy], references: [id])
  reviews          ListingReview[]
  user             User              @relation(fields: [userId], references: [id])
  userId           String            @db.ObjectId
  savedListing     SavedListing[]
  requestResponses RequestResponse[] @relation("RequestResponses")
  RequestResponse  RequestResponse[]
}

model Notification {
  id         String           @id @default(cuid()) @map("_id")
  title      String
  message    String
  type       NotificationType
  entityType String? // 'listing', 'blog', 'user', 'comment'
  entityId   String?
  isRead     Boolean          @default(false)

  // Relations
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SavedListing {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  listing   Listing  @relation(fields: [listingId], references: [id])
  userId    String   @db.ObjectId
  listingId String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userId, listingId])
}

model User {
  id                         String      @id @default(auto()) @map("_id") @db.ObjectId
  slug                       String? // Added slug field for SEO-friendly URLs
  email                      String      @unique
  username                   String
  password                   String
  profilePhoto               String?
  firstName                  String?
  lastName                   String?
  phoneNumber                String?
  whatsAppNum                String?
  accountType                AccountType @default(INDIVIDUAL)
  address                    String?
  lga                        String?
  state                      String?
  title                      String?
  role                       Role        @default(USER)
  status                     UserStatus  @default(ACTIVE)
  verified                   Boolean     @default(false)
  emailVerified              Boolean     @default(false)
  sentMessages               Message[]   @relation("SentMessages")
  companyNumber              String?
  aboutCompany               String?
  companyEmail               String?
  companyPhoto               String?
  services                   String?
  instagramLink              String?
  linkedInLink               String?
  twitterLink                String?
  facebookLink               String?
  lastLogin                  DateTime?
  resetPasswordToken         String?
  resetPasswordExpiredAt     DateTime?
  verificationToken          String?
  verificationTokenExpiredAt DateTime?
  bannedAt                   DateTime?
  bannedReason               String?
  bannedBy                   String?     @db.ObjectId
  createdAt                  DateTime    @default(now())
  updatedAt                  DateTime?

  // Company/Business fields
  companyName        String?
  companyRegNumber   String?
  companyRegDocument String? // File URL
  businessLicense    String? // File URL
  taxCertificate     String? // File URL

  // Profile completion tracking
  profileCompleted      Boolean @default(false)
  profileCompletionStep Int     @default(0)

  savedlisting  SavedListing[]
  blogs         Blog[]
  blogComments  BlogComment[]
  ListingReview ListingReview[]
  Listing       Listing[]
  Notification  Notification[]

  // Opposite relation for approved listings
  ApprovedListings Listing[]         @relation("ApprovedListings")
  Message          Message[]
  propertyRequests PropertyRequest[]
  agentResponses   RequestResponse[] @relation("AgentResponses")

  @@index([slug])
  @@index([accountType])
  @@index([verified])
  @@index([state])
}

model BlogCategory {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  slug        String    @unique
  description String?
  color       String?   @default("#3B82F6")
  isActive    Boolean   @default(true)
  blogs       Blog[]    @relation("CategoryBlogs")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
}

model Blog {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  slug           String        @unique
  content        String
  excerpt        String?
  seoTitle       String?
  seoDescription String?
  metaKeywords   String[]
  readingTime    Int? // in minutes
  viewCount      Int           @default(0)
  isFeatured     Boolean       @default(false)
  isPublished    Boolean       @default(false)
  publishedAt    DateTime?
  featuredImage  String?
  images         String[]
  tags           String[]
  author         User          @relation(fields: [authorId], references: [id])
  authorId       String        @db.ObjectId
  category       BlogCategory  @relation("CategoryBlogs", fields: [categoryId], references: [id])
  categoryId     String        @db.ObjectId
  comments       BlogComment[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime?

  @@index([isPublished, publishedAt])
  @@index([categoryId])
  @@index([authorId])
}

model BlogComment {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  author     User      @relation(fields: [authorId], references: [id])
  authorId   String    @db.ObjectId
  blog       Blog      @relation(fields: [blogId], references: [id])
  blogId     String    @db.ObjectId
  parentId   String?   @db.ObjectId
  isApproved Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime?

  @@index([blogId])
  @@index([authorId])
}

model Conversation {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  participants  String[]  @db.ObjectId
  lastMessage   String?
  lastMessageAt DateTime?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  messages Message[]

  @@index([participants])
}

model Message {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  content        String
  senderId       String      @db.ObjectId
  conversationId String      @db.ObjectId
  messageType    MessageType @default(TEXT)
  isRead         Boolean     @default(false)
  readAt         DateTime?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  sender       User         @relation("SentMessages", fields: [senderId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  User         User?        @relation(fields: [userId], references: [id])
  userId       String?      @db.ObjectId

  @@index([conversationId])
  @@index([senderId])
}

enum MessageType {
  TEXT
  IMAGE
  FILE
}

enum RequestStatus {
  PENDING
  OPEN
  MATCHED
  CLOSED
  EXPIRED
}

model PropertyRequest {
  id     String        @id @default(auto()) @map("_id") @db.ObjectId
  slug   String        @unique
  status RequestStatus @default(PENDING)

  // Property Details
  purpose ListingCategory // RENT, SALE, JOINT_VENTURE, SHORT_LET
  type    PropertyType // CO_WORKING_SPACE, COMMERCIAL_PROPERTY, etc.
  subType PropertySubType? // Optional

  // Location
  state String
  lga   String

  // Property Specifications (Optional)
  number_of_beds Int?
  budget         Float // Budget for the request

  // Request Details
  comments String? // Additional comments/requirements

  // Contact Information
  name        String
  email       String
  phoneNumber String
  accountType AccountType // INDIVIDUAL, LAW, SURVEY, etc.

  // System fields
  isPublic  Boolean   @default(true) // Whether to show publicly
  expiresAt DateTime? // When the request expires
  viewCount Int       @default(0)

  // Relations
  userId String? @db.ObjectId // Optional - if user is logged in
  user   User?   @relation(fields: [userId], references: [id])

  // Responses from agents/property owners
  responses RequestResponse[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([purpose])
  @@index([state])
  @@index([budget])
  @@index([createdAt])
}

model RequestResponse {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  message       String
  contactEmail  String?
  contactPhone  String?
  proposedPrice Float? // Agent's proposed price

  // Relations
  requestId String          @db.ObjectId
  request   PropertyRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)

  agentId String @db.ObjectId
  agent   User   @relation("AgentResponses", fields: [agentId], references: [id])

  // Optional listing if agent has a specific property
  listingId String?  @db.ObjectId
  listing   Listing? @relation("RequestResponses", fields: [listingId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Listing   Listing? @relation(fields: [listingId], references: [id])

  @@unique([requestId, agentId]) // One response per agent per request
}
